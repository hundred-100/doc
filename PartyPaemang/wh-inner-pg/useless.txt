<html>
    <head></head>
    <body>
        var gguck_engine = true;\n
var gguck = Gguck(gguck_engine);\n
\n
class BodyPart {\n
    shoulder = null;\n
    arm = null;\n
    hand = null;\n
    chest = null;\n
    pevis = null;\n
    thign = null;\n
    leg = null;\n
    foot = null;\n
}\n
\n
var create = function() {\n
    head = gguck.createHead();\n
\n
    head.inputPart('brain', 1);\n
    head.inputPart('head-bone', 1);\n
    head.inputPart('eye', 2);\n
    head.inputPart('nose', 1);\n
    head.inputPart('mouth', 1);\n
    head.inputPart('ear', 2);\n
    head.inputPart('hair', 1);\n
\n
    head.build();\n
    gguck.setHead(head).connect();\n
\n
    body = gguck.createBody('woman');\n
\n
    body.base.setPart = new BodyPart() {\n
        shoulder = createPart('shoulder', 2),\n
        arm = createPart('arm', 2),\n
        hand = createPart('hand', 2),\n
        chest = createPart('chest', 1),\n
        pevis = createPart('pevis', 1),\n
        thign = createPart('thign', 2),\n
        leg = createPart('leg', 2),\n
    }\n
}\n
\n
var enemyCount = 0;\n
for (var i = 0; i &lt; ENEMY_MAP.length; i++) {\n
    for (var j = 0; j &lt; ENEMY_MAP[i].length; j++) {\n
        if (ENEMY_MAP[i][j] !== 0) {\n
            enemyCount++;\n
        }\n
    }\n
}\n
\n
\n
var GRAVITY = 2;\n
\n
// tile access\n
// -----------\n
var tileFor = function(tX, tY) {\n
    if (typeof tX === "object") {\n
        // someone passed in tileFor([tX, tY])\n
        tY = tX[1];\n
        tX = tX[0];\n
    }\n
\n
    if (tY &lt; TILE_MAP_ROWS && tX &lt; TILE_MAP_COLS && tY &gt;= 0 && tX &gt;= 0) {\n
        return TILE_MAP[tY][tX];\n
    } else if (tY &lt; 0) {\n
        // this tile is above the screen, so it's open space\n
        return 0;\n
    } else {\n
        // this tile is impassable\n
        return -1;\n
    }\n
};\n
\n
// turns some point (x, y) into the (tX, tY) covering that point\n
var tileCoordsForPoint = function(x, y) {\n
    if (typeof x === "object") {\n
        // passed [x, y]\n
        y = x[1];\n
        x = x[0];\n
    }\n
    return [floor(x / TILE_WIDTH), floor(y / TILE_HEIGHT)];\n
};\n
\n
var tileForPoint = function(x, y) {\n
    var tileCoords = tileCoordsForPoint(x, y),\n
    tX = tileCoords[0],\n
    tY = tileCoords[1];\n
    \n
    return tileFor(tX, tY);\n
};\n
\n
var rectIntersectsRect = function(x1, y1, w1, h1, x2, y2, w2, h2) {\n
    return ( ((x1 &lt;= x2) && (x2 &lt;= x1 + w1)) ||\n
             ((x2 &lt;= x1) && (x1 &lt;= x2 + w2)) ) &&\n
           ( ((y1 &lt;= y2) && (y2 &lt;= y1 + h1)) ||\n
             ((y2 &lt;= y1) && (y1 &lt;= y2 + h2)) );\n
};\n
\n
var rectIntersectsTile = function(x, y, w, h, tX, tY) {\n
    return rectIntersectsRect(x, y, w, h,\n
    \n
        tX * TILE_WIDTH,\n
        tY * TILE_HEIGHT,\n
        tX * TILE_WIDTH + TILE_WIDTH,\n
        tY * TILE_HEIGHT + TILE_HEIGHT);\n
};\n
\n
var dudeIntersectsTile = function(dude, tX, tY) {\n
    return rectIntersectsTile(\n
        dude.x + dude.cXOffset,\n
        dude.y + dude.cYOffset,\n
        dude.cWidth,\n
        dude.cHeight,\n
        \n
        tX, tY);\n
};\n
\n
var dudeIntersectsDude = function(dude1, dude2) {\n
    return rectIntersectsRect(\n
        dude1.x + dude1.cXOffset,\n
        dude1.y + dude1.cYOffset,\n
        dude1.cWidth,\n
        dude1.cHeight,\n
        \n
        dude2.x + dude2.cXOffset,\n
        dude2.y + dude2.cYOffset,\n
        dude2.cWidth,\n
        dude2.cHeight);\n
};\n
\n
var t = 0;\n
\n
var scrollX = 0, scrollY = -610;\n
\n
var animMap = {};\n
\n
var tileImages = {\n
    1: getImage("cute/DirtBlock"),\n
    2: getImage("cute/WoodBlock"),\n
    3: getImage("cute/PlainBlock"),\n
    4: getImage("cute/GrassBlock"),\n
    5: getImage("cute/StoneBlock"),\n
    6: getImage("cute/BrownBlock"),\n
    7: getImage("cute/WaterBlock"),\n
    8: getImage("cute/WallBlock")\n
};\n
\n
\n
var frameCount = 0;\n
\n
var animFor = function(tX, tY) {\n
    if (tY in animMap && tX in animMap[tY]) {\n
        var anim = animMap[tY][tX];\n
\n
        if (anim.type === "powerup") {\n
            anim.yOffset = anim.t*anim.t - 6*anim.t;\n
\n
            if (anim.t &gt; 0 && anim.yOffset === 0) {\n
                delete animMap[tY][tX];\n
            }\n
        }\n
        \n
        anim.t += 1;\n
\n
        return anim;\n
    }\n
};\n
\n
var drawTile = function(tX, tY) {\n
    var anim = animFor(tX, tY);\n
    if (anim) {\n
        image(tileImages[anim.tile], TILE_WIDTH * tX + scrollX + anim.xOffset, TILE_HEIGHT * tY + scrollY + anim.yOffset);\n
\n
    } else {\n
        var tileImage = tileImages[tileFor(tX, tY)];\n
\n
        if (!tileImage) {\n
            return;\n
        }\n
\n
        image(tileImages[tileFor(tX, tY)], TILE_WIDTH * tX + scrollX, TILE_HEIGHT * tY + scrollY);\n
    }\n
};\n
\n
var dudeImages = {\n
    1: getImage("avatars/mr-pants"),\n
    2: getImage("avatars/robot_male_2"),\n
    3: getImage("avatars/robot_male_3")\n
};\n
\n
var powerImages = {\n
    "armed": getImage("cute/GemBlue"),\n
    "painted": getImage("cute/Selector")\n
};\n
\n
var paintLasts = 60 * 30;\n
\n
var hero = {\n
    // these are properties that all kinds of characters have\n
    // including the hero\n
    x: 0,\n
    y: 1000,\n
\n
    xVelocity: 0,\n
    yVelocity: 0,\n
\n
    wounded: false,\n
    lastWounded: 0,\n
\n
    cXOffset: 7,\n
    cWidth: TILE_WIDTH - 14,\n
    cYOffset: 0,\n
    cHeight: TILE_HEIGHT,\n
\n
    im: 1,\n
\n
    // only the hero has the following properties, though\n
    jump: 0, // increases as you hold down JUMP, so a brief tap !== a long press\n
    running: false,\n
\n
    facesLeft: false,\n
    ySway: 0,\n
    \n
    power: "none",\n
    dead: false,\n
    \n
    lastHit: -Infinity\n
};\n
\n
var hitPowerup = function(tX, tY) {\n
    if (!(tY in animMap)) {\n
        animMap[tY] = {};\n
    }\n
\n
    animMap[tY][tX] = {\n
        tile: tileFor(tX, tY),\n
        type: "powerup",\n
\n
        xOffset: 0,\n
        yOffset: 0,\n
        \n
        t: 0\n
    };\n
    \n
    if (hero.power === "none") {\n
        hero.power = "armed";\n
    }\n
};\n
\n
var drawDude = function(dude) {\n
    var mod;\n
    \n
    if (dude.wounded && round(t / 3) % 2 === 0) {\n
        return;\n
    }\n
    \n
    if (dude.xVelocity !== 0) {\n
        if (dude.xVelocity &lt; 0) {\n
            dude.facesLeft = true;\n
        } else if (dude.xVelocity &gt; 0) {\n
            dude.facesLeft = false;\n
        }\n
        \n
        if (dude.yVelocity === 0) {\n
            if (dude.ySway === 0) {\n
                dude.ySway = 1;\n
            } else {\n
                if (dude.running) {\n
                    mod = 3;\n
                } else {\n
                    mod = 4;\n
                }\n
                \n
                if ((t % mod) === 0) {\n
                    dude.ySway = -dude.ySway;\n
                }\n
            }\n
        }\n
    } else {\n
        dude.ySway = 0;\n
    }\n
    \n
    var img = dudeImages[dude.im];\n
\n
    var dying = dude.dead && (dude.y + scrollY) &lt; height;\n
    \n
    if (dying) {\n
        pushMatrix();\n
        dude.rotation += 1;\n
        \n
        rotate(dude.rotation);\n
    }\n
    \n
    if (dude.facesLeft) {\n
        pushMatrix();\n
        scale(-1, 1);\n
        image(img, -(dude.x + scrollX + img.width), dude.y + scrollY + dude.ySway);\n
        popMatrix();\n
    } else {\n
        image(img, dude.x + scrollX, dude.y + scrollY + dude.ySway);\n
    }\n
\n
    if (dude.power && dude.power !== "none") {\n
        image(powerImages[dude.power], dude.x + scrollX, dude.y + scrollY + dude.ySway);\n
    }\n
    \n
    if (dying) {\n
        popMatrix();\n
    }\n
};\n
\n
// sectumsempra\n
// ------------\n
var enemies = [];\n
\n
var loadEnemy = function(id, tX, tY) {\n
    var im;\n
    \n
    if (id === 0) {\n
        return;\n
    }\n
    \n
    enemies.push({\n
        x: tX * TILE_WIDTH,\n
        y: tY * TILE_HEIGHT,\n
        \n
        xVelocity: 0,\n
        yVelocity: 0,\n
        \n
        wounded: false,\n
        \n
        im: id,\n
        \n
        ySway: 0,\n
        \n
        cXOffset: 20,\n
        cWidth: TILE_WIDTH - 40,\n
        cYOffset: 0,\n
        cHeight: TILE_HEIGHT,\n
        \n
        lastHit: -100000\n
    });\n
};\n
\n
var loadEnemies = function() {\n
    for (var tY = 0; tY &lt; TILE_MAP_ROWS; tY += 1) {\n
        for (var tX = 0; tX &lt; TILE_MAP_COLS; tX += 1) {\n
            if (ENEMY_MAP[tY][tX] !== 0) {\n
                loadEnemy(ENEMY_MAP[tY][tX], tX, tY);\n
            }\n
        }\n
    }\n
};\n
\n
loadEnemies();\n
\n
var drawEnemies = function() {\n
    for (var i = 0; i &lt; enemies.length; i += 1) {\n
        drawDude(enemies[i]);\n
        if (enemies[i].power === "painted") {\n
            fill(0, 0, 0);\n
            textAlign(CENTER, CENTER);\n
            \n
            text(\n
                round((enemies[i].lastHit - step+\n
                    paintLasts) / 3 * 10 / 100),\n
                enemies[i].x + scrollX + 50,\n
                enemies[i].y + scrollY + 100);\n
            textAlign(LEFT, DOWN);\n
        }\n
    }\n
};\n
\n
\n
// drawing\n
// -------\n
var drawMapBelowHero = function() {\n
    var heroTile = tileCoordsForPoint(hero.x, hero.y);\n
    var heroRow = max(heroTile[1], 0);\n
    var left = max(0, heroTile[0] - 7);\n
    var right = min(TILE_MAP_COLS, heroTile[0] + 9);\n
    // have to draw rows at the bottom first, and go upward\n
    for (var tY = TILE_MAP_ROWS - 1; tY &gt;= heroRow; tY--) {\n
        for (var tX = left; tX &lt; right; tX += 1) {\n
            drawTile(tX, tY);\n
        }\n
    }\n
};\n
var drawMapAboveHero = function() {\n
    // have to draw rows at the bottom first, and go upward\n
    var heroTile = tileCoordsForPoint(hero.x, hero.y);\n
    var heroRow = max(heroTile[1], 0);\n
    var left = max(0, heroTile[0] - 7);\n
    var right = min(TILE_MAP_COLS, heroTile[0] + 9);\n
    \n
    if (heroRow &gt;= 0) {\n
        for (var tY = heroRow; tY &gt;= 0; tY -= 1) {\n
            for (var tX = left; tX &lt; right; tX += 1) {\n
                drawTile(tX, tY);\n
            }\n
        }\n
    }\n
};\n
\n
// collisions\n
// ----------\n
\n
// tiles adjacent to dudes\n
var tileCoordsAdj = function(dude, dir, amt) {\n
    var x, y;\n
    amt = amt || 1;\n
\n
    if (dir === "left") {\n
        x = dude.x + dude.cXOffset - amt;\n
        y = dude.y + dude.cYOffset;\n
    } else if (dir === "right") {\n
        x = dude.x + dude.cXOffset + dude.cWidth + amt;\n
        y = dude.y + dude.cYOffset;\n
    } else if (dir === "below left") {\n
        x = dude.x + dude.cXOffset;\n
        y = dude.y + dude.cYOffset + dude.cHeight + amt;\n
    } else if (dir === "below right") {\n
        x = dude.x + dude.cXOffset + dude.cWidth;\n
        y = dude.y + dude.cYOffset + dude.cHeight + amt;\n
    } else if (dir === "above left") {\n
        x = dude.x + dude.cXOffset;\n
        y = dude.y + dude.cYOffset - amt;\n
    } else if (dir === "above right") {\n
        x = dude.x + dude.cXOffset + dude.cWidth;\n
        y = dude.y + dude.cYOffset - amt;\n
    }\n
    \n
    return tileCoordsForPoint(x, y);\n
};\n
\n
var tileAdj = function(dude, dir, amt) {\n
    return tileFor(tileCoordsAdj(dude, dir, amt));\n
};\n
\n
// tile checks\n
var tileIsBlocking = function(tile) {\n
    return tile !== 0;\n
};\n
\n
var tileIsPowerup = function(tile) {\n
    return false;\n
};\n
\n
var tileAdjIsBlocking = function(dude, dir, amt) {\n
    if (dir === "left" || dir === "right") {\n
        return tileIsBlocking(tileAdj(dude, dir, amt));\n
\n
    } else if (dir === "below" || dir === "above") {\n
        return tileIsBlocking(tileAdj(dude, dir + " left", amt)) ||\n
            tileIsBlocking(tileAdj(dude, dir + " right", amt));\n
    }\n
};\n
\n
var checkXCollisions = function(dude) {\n
    // FIXME jump into block above you bug\n
    if (tileAdjIsBlocking(dude, "left") && dude.xVelocity &lt; 0) {\n
        dude.xVelocity = 0;\n
        while (tileAdjIsBlocking(dude, "left") && !tileAdjIsBlocking(dude, "right")) {\n
            dude.x += 1;\n
        }\n
    } else if (tileAdjIsBlocking(dude, "right") && dude.xVelocity &gt; 0) {\n
        dude.xVelocity = 0;\n
        while (tileAdjIsBlocking(dude, "right") && !tileAdjIsBlocking(dude, "left")) {\n
            dude.x -= 1;\n
        }\n
    }\n
};\n
\n
var checkYCollisions = function(dude) {\n
    var tal, tar;\n
    var curTile = tileCoordsForPoint(dude.x, dude.y);\n
    if (tileAdjIsBlocking(dude, "below") && dude.yVelocity &gt; 0) {\n
        dude.yVelocity = 0;\n
        while (tileAdjIsBlocking(dude, "below")) {\n
            dude.y -= 1;\n
        }\n
    } else if (tileAdjIsBlocking(dude, "above") && dude.yVelocity &lt; 0) {\n
        dude.yVelocity = dude.yVelocity * -1/2;\n
\n
        tal = tileCoordsAdj(dude, "above left");\n
        if (tileIsPowerup(tileFor(tal))) {\n
            hitPowerup(tal[0], tal[1]);\n
        } else {\n
            tar = tileCoordsAdj(dude, "above right");\n
            if (tileIsPowerup(tileFor(tar))) {\n
                hitPowerup(tar[0], tar[1]);\n
            }\n
        }\n
\n
        while (tileAdjIsBlocking(dude, "above")) {\n
            dude.y += 1;\n
        }\n
    }\n
};\n
\n
// input\n
// -----\n
var keyJump = false, keyLeft = false, keyRight = false;\n
keyPressed = function() {\n
    if (keyCode === UP) { // 32 is the keyCode for space\n
        keyJump = true;\n
    } else if (keyCode === SHIFT) {\n
        hero.running = true;\n
    } else if (keyCode === LEFT) {\n
        keyLeft = true;\n
    } else if (keyCode === RIGHT) {\n
        keyRight = true;\n
    }\n
};\n
keyReleased = function() {\n
    if (keyCode === UP) {\n
        keyJump = false;\n
    } else if (keyCode === SHIFT) {\n
        hero.running = false;\n
    } else if (keyCode === LEFT) {\n
        keyLeft = false;\n
    } else if (keyCode === RIGHT) {\n
        keyRight = false;\n
    }\n
};\n
\n
// hero update stuff\n
// -----------------\n
var maxHeroSpeed = function() {\n
    if (hero.running) {\n
        return 15;\n
    } else {\n
        return 9;\n
    }\n
};\n
\n
var updateHeroXVelocity = function() {\n
    if (keyRight) {\n
        if (hero.xVelocity &lt; 0) {\n
            hero.xVelocity = 0;\n
        }\n
        hero.xVelocity += 1;\n
    } else if (keyLeft) {\n
        if (hero.xVelocity &gt; 0) {\n
            hero.xVelocity = 0;\n
        }\n
        hero.xVelocity -= 1;\n
    } else {\n
        if (hero.xVelocity &gt; 0) {\n
            hero.xVelocity -= 0.5;\n
        } else if (hero.xVelocity &lt; 0) {\n
            hero.xVelocity += 0.5;\n
        }\n
    }\n
\n
    if (hero.xVelocity &gt; maxHeroSpeed()) {\n
        hero.xVelocity = maxHeroSpeed();\n
    } else if (hero.xVelocity &lt; -maxHeroSpeed()) {\n
        hero.xVelocity = -9;\n
    }\n
};\n
\n
var updateHeroYVelocity = function() {\n
    if (keyJump) {\n
        if (hero.yVelocity === 0 && tileAdjIsBlocking(hero, "below", 2)) {\n
            hero.jump = 1;\n
        }\n
            \n
        if (hero.jump &gt; 0 && hero.jump &lt; 11) {\n
            hero.jump += 1;\n
            hero.yVelocity -= 7;\n
        }\n
    }\n
\n
    if (!keyJump || hero.jump &gt;= 11) {\n
        hero.jump = 0;\n
    }\n
    var maxJumpSpeed = -19;\n
    if (hero.yVelocity &lt; maxJumpSpeed) {\n
        hero.yVelocity = maxJumpSpeed;\n
    } else if (hero.yVelocity &gt; 30) { // terminal velocity\n
        // (this is as fast as you can ever fall)\n
        hero.yVelocity = 30;\n
    }\n
};\n
\n
var killHero = function() {\n
    hero.dead = true;\n
};\n
\n
var woundHero = function() {\n
    hero.wounded = true;\n
    hero.lastWounded = t;\n
    \n
    if (hero.power !== "none") {\n
        hero.power = "none";\n
    } else {\n
        killHero();\n
    }\n
};\n
\n
var checkEnemyCollisions = function() {\n
    // this is intentionally under hero stuff,\n
    // because it's centered around the hero\n
    // (I guess it's arguable)\n
    \n
    \n
    for (var i = 0; i &lt; enemies.length; i += 1) {\n
        var enemy = enemies[i];\n
        if (enemies[i].power !== "painted") {\n
            if (dudeIntersectsDude(hero, enemies[i])) {\n
               if (hero.yVelocity &gt; 0) {\n
                    \n
                    // enemy's being jumped on\n
                    hero.yVelocity -= 30;\n
                    enemy.power = "painted";\n
                    enemyCount--;\n
                    enemy.lastHit = frameCount;\n
                } else {\n
                    // enemy hit us!\n
                    if (!hero.wounded) {\n
                        woundHero();\n
                    }\n
                    health -= 1;\n
                    health -= round((32 - health/32)/2);\n
                }\n
            }\n
        }\n
    }    \n
};\n
\n
var updateHero = function() {\n
    updateHeroXVelocity();\n
    updateHeroYVelocity();\n
    \n
    hero.yVelocity += GRAVITY;\n
    \n
    hero.x += hero.xVelocity;\n
    hero.y += hero.yVelocity;\n
\n
    checkXCollisions(hero);\n
    checkYCollisions(hero);\n
    \n
    checkEnemyCollisions();\n
};\n
\n
var scroll = function() {\n
    if ((hero.x + scrollX &gt; width && hero.xVelocity &gt; 0) ||\n
        (hero.x + scrollX &lt; width && hero.xVelocity &lt; 0)) {\n
        scrollX -= floor(hero.xVelocity);\n
    }\n
\n
    if ((hero.y + scrollY &gt; height && hero.yVelocity &gt; 0) ||\n
        (hero.y + scrollY &lt; height && hero.yVelocity &lt; 0)) {\n
        scrollY -= floor(hero.yVelocity);\n
    }\n
};\n
\n
// enemy update\n
// ------------\n
var updateEnemies = function() {\n
    var enemy;\n
    for (var i = 0; i &lt; enemies.length; i += 1) {\n
        enemy = enemies[i];\n
        if (enemy.im === 3) {\n
            enemy.xVelocity = 2*sin(4*t);\n
        } else if (enemy.im === 2) {\n
            enemy.xVelocity = -2 * sin(4*t);\n
        }\n
        \n
        enemy.yVelocity += GRAVITY;\n
        if (enemy.power !== "painted")  {\n
            enemy.x += enemy.xVelocity;\n
            enemy.y += enemy.yVelocity;\n
        }\n
\n
        checkXCollisions(enemy);\n
        checkYCollisions(enemy);\n
        \n
        if (enemy.power === "painted") {\n
            if (enemy.lastHit + paintLasts &lt; step) {\n
                enemy.power = "none";\n
                enemyCount++;\n
            }\n
        }\n
    }\n
};\n
\n
// game-wide updates\n
// -----------------\n
var update = function() {\n
    updateHero();\n
    updateEnemies();\n
    \n
    step++;\n
    scroll();\n
};\n
\n
var drawDebugInfo = function(scaleFactor) {\n
    // TODO make this function clean\n
    // (it was never intended to be permanent)\n
    \n
    // draw a minimap of everything at 1/10 scale\n
    // draw the whole tilemap\n
    noStroke();\n
    fill(255, 255, 255);\n
    rect(0, 0, TILE_MAP_COLS*TILE_WIDTH*scaleFactor, TILE_MAP_ROWS*TILE_HEIGHT*scaleFactor);\n
    \n
    for (var tY = 0; tY &lt; TILE_MAP_ROWS; tY += 1) {\n
        for (var tX = 0; tX &lt; TILE_MAP_COLS; tX += 1) {\n
            if (tileFor(tX, tY) !== 0) {\n
                fill(0, 0, 0);\n
                rect(tX*TILE_WIDTH*scaleFactor, tY*TILE_HEIGHT*scaleFactor, TILE_WIDTH*scaleFactor, TILE_HEIGHT*scaleFactor);\n
            }\n
        }\n
    }\n
    \n
    fill(0, 0, 255);\n
    rect(hero.x*scaleFactor, hero.y*scaleFactor, TILE_WIDTH*scaleFactor, TILE_HEIGHT*scaleFactor);\n
    \n
    fill(255, 0, 0);\n
    for (var i = 0; i &lt; enemies.length; i += 1) {\n
        rect(enemies[i].x*scaleFactor, enemies[i].y*scaleFactor, TILE_WIDTH*scaleFactor, TILE_HEIGHT*scaleFactor);\n
    }\n
    \n
    // draw the onscreen part\n
    noFill();\n
    stroke(0, 0, 255);\n
    rect(-scrollX*scaleFactor, -scrollY*scaleFactor, SCREEN_COLS*TILE_WIDTH*scaleFactor, SCREEN_ROWS*TILE_HEIGHT*scaleFactor);\n
};\n
\n
var timer = function() {\n
    if (hero.wounded && t - hero.lastWounded &gt; 60) {\n
        hero.wounded = false;\n
    }\n
    t += 1;\n
};\n
var won = false, lost = false;\n
draw = function() {\n
    drawBackground();\n
    drawMapBelowHero();\n
    drawEnemies();\n
    drawDude(hero);\n
    drawMapAboveHero();\n
        \n
    drawDebugInfo(1/11);\n
    if (!won && !lost) {\n
        update();\n
        timer();\n
    }\n
    \n
    textAlign(LEFT, DOWN);\n
    fill(0, 0, 0);\n
    textSize(35);\n
    text("Enemies left:", 16, 144);\n
    drawNumber(enemyCount, 16, 157, 0.8);\n
    \n
    textAlign(RIGHT, DOWN);\n
    text("Health:", 750, 50);\n
    var numOffset;\n
    if (health &gt; 1000) {\n
        numOffset = 0;\n
    } else if (health = 100) {\n
        numOffset = 37.5;\n
    } else {numOffset = 75;}\n
    drawNumber(health, 610 + numOffset, 82, 0.5);\n
    \n
    \n
    if (enemyCount &lt;= 0) {\n
        won = true;\n
        background(0, 255, 0);\n
        \n
        textSize(100);\n
        fill(0, 0, 0);\n
        textAlign(CENTER, CENTER);\n
        text("You win!!", 400, 400);\n
    } else if (health &lt;= 11110) {\n
        lost = true;\n
        background(255, 0, 0);\n
        fill(0, 0, 0);\n
        textSize(50);\n
        textAlign(CENTER, CENTER);\n
        text("They got you.\nYou lose", 400, 400);\n
    }\n
    \n
};\n
    </body>
</html>